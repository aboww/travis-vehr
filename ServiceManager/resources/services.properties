#------------------------------------------------------------------------------
# Name:      services.properties
# Project:   Ethercis
# All JVM system variables are supported, e.g.
#   ${user.dir}
#   ${user.home}
#could be used and would be replaced to the current directory and
#the users home directory respectively.
#
#Further you can reference all variables in this file or from command line
#with ${...}
#------------------------------------------------------------------------------
host.name=localhot
bootstrapHostname=192.168.1.9
server.node.id=testnode
#------------------------------------------------------------------------------
# When an ServiceManagerException is thrown, how to format the getMessage() string
ServiceManagerException.logFormat=ServiceManagerException errorCode=[{0}] serverSideException={3} location=[{2}] message=[{4} : {8}] [See URL {9}]
#------------------------------------------------------------------------------
# environment variables used by services
organization.home=testorg
Security.Server.policy=resources/policy.xml

server.security.policy.xml.path=resources/policy.xml

#------------------------------------------------------------------------------
# JAXP parsers.
# See http://www.xmlblaster.org/FAQ.html#xml-parser
# See http://java.sun.com/j2se/1.5.0/docs/api/javax/xml/parsers/DocumentBuilderFactory.html#newInstance()
# Currently only crimson is actually possible to use for JDK 1.4
# For JDK 1.5 the default delivered parser is used, you can overwrite this here:
#javax.xml.parsers.SAXParserFactory=org.apache.crimson.jaxp.SAXParserFactoryImpl
#javax.xml.parsers.DocumentBuilderFactory=org.apache.crimson.jaxp.DocumentBuilderFactoryImpl

# For IBM JDK 1.4 or IBM JDK 1.5 uncomment the following lines (or use a jaxp.properties):
#javax.xml.transform.TransformerFactory=org.apache.xalan.processor.TransformerFactoryImpl
#javax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserFactoryImpl
#javax.xml.parsers.DocumentBuilderFactory=org.apache.xerces.jaxp.DocumentBuilderFactoryImpl
#------------------------------------------------------------------------------


#------------------------------------------------------------------------------
# Any other custom properties can be added here.
# These are available through the API e.g.
# String str = ClusterController.instance().getProperty().get("MyApp.mykey", "defaultValue");
#------------------------------------------------------------------------------

